import "native/os"
import "native/path"
import "io"
import "strings"
import "arrays"
import "set"

const inputPath str = path::resolve(path::dirname(__FILE__), "input.txt")

const directions arr = [
  [1, 0],
  [0, 1],
  [-1, 0],
  [0, -1]
]

def hike(map arr, trail_head arr) num {
  mut result num = 0
  mut visited hashmap = set::new()

  def dfs(x num, y num, current_height num) {
    if x < 0 or y < 0 or x >= ~map[0] or y >= ~map or set::contains(visited, [x, y]) {
      return null
    }

    if map[y][x] != current_height {
      return null
    }

    if map[y][x] == 9 {
      result += 1
      return null
    }

    set::add(visited, [x, y])

    for mut i num = 0, ~directions - 1 {
      const nx num = x + directions[i][0]
      const ny num = y + directions[i][1]

      dfs(nx, ny, current_height + 1)
    }

    set::remove(visited, [x, y])
  }

  dfs(trail_head[0], trail_head[1], 0)

  return result
}

def parse(input str) {
  mut result arr = []

  const lines arr = strings::split(input, '\n')

  for mut i num = 0, ~lines - 1 {
    result[~result] = arrays::map(range lines[i], |x str| { return num(x) })
  }

  return result
}

def run(input str) {
  const map arr = parse(input)
  mut total_rating num = 0

  for mut y num = 0, ~map - 1 {
    for mut x num = 0, ~map[y] - 1 {
      if map[y][x] == 0 {
        const rating num = hike(map, [x, y])
        total_rating += rating
      }
    }
  }

  io::println(total_rating)
}

run("89010123
78121874
87430965
96549874
45678903
32019012
01329801
10456732")
run(os::readFile(inputPath))
